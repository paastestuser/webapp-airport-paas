# Build XrayR
FROM golang:1.20-alpine AS xrayr-builder
RUN apk update &&\
    apk add --no-cache git build-base
WORKDIR /app
# COPY . .
RUN git clone https://github.com/XrayR-project/XrayR.git /app
ENV CGO_ENABLED=0
RUN go mod download

RUN go build -v -o "myapps.js" -trimpath -ldflags "-s -w -buildid=" ./main
# build Xray-core
# syntax=docker/dockerfile:1
ARG TARGETOS TARGETARCH
FROM golang:alpine AS xray-builder
RUN apk update &&\
    apk add --no-cache git build-base
WORKDIR /src
# COPY . .
RUN git clone https://github.com/XTLS/Xray-core.git /src
ENV GOOS=${TARGETOS} \
    GOARCH=${TARGETARCH} \
    GEO_ENABLED=0
RUN go mod download

RUN go build -v -o "web" -trimpath -ldflags "-s -w -buildid=" ./main

# Build cloudflared
ARG TARGET_GOOS
ARG TARGET_GOARCH
FROM golang:1.19-alpine AS cloudflared-builder
ENV GO111MODULE=on \
    CGO_ENABLED=0 \
    TARGET_GOOS=${TARGET_GOOS} \
    TARGET_GOARCH=${TARGET_GOARCH}

WORKDIR /go/src/github.com/cloudflare/cloudflared/
RUN apk update &&\
    apk add --no-cache git build-base
# copy our sources into the builder image
RUN git clone https://github.com/cloudflare/cloudflared.git /go/src/github.com/cloudflare/cloudflared/  && \
    cd /go/src/github.com/cloudflare/cloudflared/

# compile cloudflared
RUN make cloudflared

# Final image
FROM node:slim
EXPOSE 3000
WORKDIR /app
# COPY . .
COPY server.js /app/server.js
COPY package.json /app/package.json
COPY entrypoint.sh /app/entrypoint.sh
# Install necessary packages
RUN apt-get update &&\
    apt-get install -y iproute2 unzip coreutils systemd curl wget sudo supervisor openssh-server &&\
    # Clean up
    apt-get clean &&\
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
# Copy the compiled binaries
RUN mkdir /app/apps
COPY --from=xrayr-builder /app/myapps.js /app/apps
COPY --from=xrayr-builder /app/main/*.json /app/apps
COPY --from=xrayr-builder /app/main/*.dat /app/apps
COPY --from=xray-builder /src/web /app/web.js
COPY --from=cloudflared-builder /go/src/github.com/cloudflare/cloudflared/cloudflared /usr/local/bin/cloudflared
# Install dependencies
RUN npm install -r package.json &&\
    # npm install -g pm2 &&\
    npm run build &&\
    wget -t 2 -T 10 -N https://github.com/nezhahq/agent/releases/latest/download/nezha-agent_linux_amd64.zip &&\
    unzip -qod ./ nezha-agent_linux_amd64.zip &&\
    rm -f nezha-agent_linux_amd64.zip &&\
    chmod +x /usr/local/bin/cloudflared &&\
    chmod +x /app/apps/myapps.js &&\
    chmod +x /app/nezha-agent &&\
    chmod +x /app/entrypoint.sh &&\
    chmod +x /app/web.js &&\
    # Set root password and enable password login  
    echo 'root:password' | chpasswd &&\
    sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config &&\
    sed -i 's/#PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config

# 健康检查
HEALTHCHECK --interval=2m --timeout=30s \
    CMD wget --no-verbose --tries=1 --spider http://localhost:3000
# 启动命令
ENTRYPOINT ["npm", "start"]
